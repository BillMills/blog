---
layout: post
title:  "Instructor Training at the Research Bazaar"
date:   2014-02-20
---

*This post originally appeared on the Mozilla Science Lab's blog, With contributions from Damien Irving and Kaitlin Thaney.*

Last week, as a precursor to the <a href="http://resbaz.tumblr.com/conference" target="_blank">Research Bazaar Conference</a> which concluded earlier this week in Melbourne, <a href="https://twitter.com/DrClimate" target="_blank">Damien Irving</a> and I trained over 45 new instructors from universities across Australia and New Zealand, in an effort to build up supports for Software Carpentry and open science training in the region. Last week's workshop represents the culmination of the last several months of iterating on the instructor training process after months of working with <a href="https://twitter.com/gvwilson" target="_blank">Greg Wilson</a> and a number of other instructors to run live trainings at research institutions such as the <a href="http://mozillascience.org/creating-instruction-notes-from-uva-swc-teacher-training/" target="_blank">University of Virginia</a>, <a href="http://www.tgac.ac.uk/" target="_blank">TGAC</a>, the <a href="http://mozillascience.org/software-carpentry-at-the-university-of-washington/" target="_blank">University of Washington </a>and <a href="http://wp.mozillascience.org/what-how-lessons-learned-from-software-carpentry-instructor-training/" target="_blank">UC Davis</a>. We tested out a few new approaches and twists to help new instructors get familiar with the material (specifically from Software Carpentry, as many are helping with workshops in the near future) as well as make the training more collaborative and team-based. By all reports, these were welcome additions, and I wanted to take some time to share back with the community what we tried out.

Software Carpentry Instructor Training has from the beginning been based squarely on the primary research in educational psychology and instructional design compiled by Greg - because, to paraphrase him, how can we expect to be taken seriously as scientists and researchers if we won't take equally seriously the findings of education research? But, what we struggled to connect with in the past was helping new instructors get comfortable with the Software Carpentry curriculum itself in a way that allowed them to leave instructor training feeling confident and prepared to teach their first workshop, as well as comfortable contributing back to the lesson materials themselves. Here are a few things Damien and I tried out with this latest run:\

<ul>
    <li><strong>Come prepared, and dig deep.</strong> Before the workshop, we asked students to read closely one of Software Carpentry's main lesson units: R, Python, Bash, Git or SQL. This way, the students would come prepared to do all their exercises on one of these topics, and get a chance to dig into the material and familiarize themselves with it as they practiced teaching.</li>
    <li><strong>Practice, Practice, Practice.</strong> One of Instructor Training's high points has always been an exercise where students teach on camera for three minutes, so they can see their own performance - always an eye-opening experience. This time around, we decided to turn this up to 11, packing in six rounds of this exercise, each emphasising a different teaching technique, and requiring the students to teach on the topics they did their pre-reading on. And, at the end, we had students go through the longer <a href="http://mozillascience.github.io/instructorTraining/designAndAdaptation/project.html" target="_blank">exercise</a> on lesson development and delivery, <a href="http://wp.mozillascience.org/train-the-trainers-next-iterations/" target="_blank">hashed out</a> by <a href="https://twitter.com/warcode" target="_blank">Warren Code</a> and myself after the workshop at UW.</li>
    <li><strong>Cut Hard and Stay Focused.</strong> In order to turn our attention to practice and practical pedagogy, we cut hard on some of the peripheral topics; stories about Software Carpentry's past iterations, details of the reading list, and other interesting anecdotes were left for the pub. We wanted to get the participants working together more - helping each other troubleshoot, swapping tips and tricks, and even planning their next workshop (which we set aside time for on the third day).</li>
    <li><strong>End with a Hack Day.</strong> In the past, Instructor Training has done a good job of introducing new instructors to the technical details of interacting with the materials, in terms of <a href="https://twitter.com/aleksandrana" target="_blank">Aleksandra Pawlik</a>'s intro to website setup at UC Davis, and <a href="https://twitter.com/tracykteal" target="_blank">Tracy Teal</a>'s intro to pull requests and lesson contributions at UW. Damien amplified this by leading a full half day of hacking on content after the two days of pedagogy and practice I led, which, as <a href="https://twitter.com/ethanwhite/status/566306772177014784" target="_blank">Ethan White observed</a>, resulted in a whopping 16 SWC repositories updated inside of a day, as well as a cohort of students feeling accomplished and comfortable contributing back in the way we all hoped for. Another nice hack from this activity: get students to set up not just a dummy website, but a speculative one for their upcoming first workshop, thus getting some momentum going before even leaving Instructor Training. (Note: part of the support from ResBaz - the event this preceded - is rooted in a workshop deliverable, held by the participants at their home institution.)</li>
</ul>

In total, students were very satisfied with the results. The energy and enthusiasm in the room was huge, the content was well-received, and both advisors/senior staff and their students were engaged in all the exercises; the classroom was never quiet, a key learning heuristic we only half-joke about in the training. More concretely, <em>not a single participant</em> gave feedback saying they felt unprepared or unfamiliar with Software Carpentry's content on leaving - which is huge. In the past, this was the most common criticism we received and (in my opinion) our biggest hurdle to overcome. By asking students to do the pre-reading and focusing all their exercises on it, they went home with a big chunk of preparation for teaching their first unit already done - a major hurdle defeated for getting in front of that first classroom (which many were doing only a few days following the training). Many comments were made afterwards that the pedagogical content was so substantial and so usable, that it would enhance teaching not just in the workshop, but in the participants' more conventional teaching, as well.

Another hack worth continuing in the future was the timing of the instructor training (Wednesday to Friday), with a call for the participants to help in live workshops the following week (Monday to Wednesday). It helped contextualize the learnings and put them into practice for the students, and provided an opportunity for groups formed in the instructor training to build additional ties and camaraderie, as many helped with their first workshop this week. One thing I value from the Software Carpentry program is the sense of community across discipline in the instructor pool, and setting in the time to build that at this event in Australia was wonderful to observe as a bystander.

Of course, there are still things to do better. It's clear that a heavy emphasis on practice is valuable for new instructors, but it would be good to make room for another longer, 10-minute teaching activity, at the expense of a couple of the shorter, three-minute lessons; there's a certain non-linearity in teaching, where the first three minutes are mostly set-up - practice will be much enhanced with more chances to get past that phase of the lesson, so I've recombined a couple of the exercises in the <a href="http://mozillascience.github.io/instructorTraining/feedback/index.html" target="_blank">Feedback</a> section into one longer practice session.

Another thing we can do even better next time, is to introduce the concept of a 'learner's license' for new instructors once they complete the training. With so much teaching practice already baked into Instructor Training, doing five more minutes as a review exercise as is part of the standard certification procedure doesn't add so much anymore. Instead, it might work better to give our new instructors a graduated certification, allowing them to teach under the supervision of a more experienced instructor, to be graduated to a full instructor after some number of such supervised runs. This will scale more easily than the current model, give local communities more ownership of their instructor pool, and allow us to send new instructors off from Instructor Training rewarded with a clear and solid new certification.

You can see the curriculum and exercises we taught from <a href="http://mozillascience.github.io/instructorTraining/" target="_blank">here</a> - these closely follow the Software Carpentry <a href="https://github.com/swcarpentry/bc/tree/gh-pages/teaching" target="_blank">repo</a> on the same (with updates to land there very shortly). The <a href="https://github.com/resbaz/2015-02-11-instructor-training" target="_blank">schedule</a> we followed is also available (with the clarification that the last hack day was more of a half-day). We look forward to doing this all again, either at next year's Research Bazaar, or much sooner; and as usual, our sincere appreciation goes out to all their students, whose effort and engagement are what truly helps to advance skills training in research. And special thanks to Greg for his work in sharing the Software Carpentry instructor training model, and to Damien, Flanders and the team here in Australia for their work in modelling it for this event.